I"&<h5 id="merge-sort">Merge-Sort</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>Merge(A, lo, mid, hi)
	**pre-condition: lo&lt;=mid&lt;=hi, A[lo,mid] and A[mid+1,hi] sorted
	**post-condition: A[lo,hi] sorted
	
Merge-sort(A,lo,hi)
	if lo&lt;hi then
		mid = floor((lo+hi)/2)
		Merge-Sort(A,lo,mid)
		Merge-sort(A,mid+1,hi)
		Merge(A,lo,mid,hi)
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Let denote #KC for a list of size n. Suppose the number of keys in the list is a power of 2.</p>

<p>T(n)=(n-1)+2*T(n/2).</p>

<p>To solve it: 1. Iterated substitution. 2. recurrence Tree 3. Guess and test. 4 Master Theorem</p>

<p>T(n) = 2T(n/2) + (n-1) = 2<em>(2</em>T(n/4)+(n/2-1))+(n-1)=4T(n/4)+(n-2)+(n-1) = 4(2T(n/8)+(n/4-1))+(n-2)+(n-1) = 8T(n/8)+(n-4)+(n-2)+(n-1) = 2^k*T(n/2^k)+(n-2^(k-1))+(n-2^(k-2))+…+(n-2^0)</p>

<p>The last one is T(1)=T(n/2^k) So let 2^k=n. T(n)=2^k<em>T(1) + (2^k-2^(k-1)) + (2^k-2^(k-2)) + … + (2^k-2^0)= k</em>2^k-sum(2^i) (0&lt;=i&lt;=k-1) = k*2^k-(2^k-1)=(k-1)2^k+1.</p>

<p>2^k=n, k=logn. T(n) = (logn-1)n+1 =  O(nlogn)</p>

<p>To prove by induction: T(n) = (k-1)2^k+1    n = 2^k</p>

<p>Base case: T(1) = 0. k = 0, (0-1)2^0+1 = 1-1=0</p>

<p>Induction step. Suppose T(2^k) = (k-1)2^k+1, we need to prove that T(2^(k+1))=(k)2^(k+1)+1</p>

<p>T(2^(k+1))=(2^(k+1)-1)+2<em>T(2^k)= (2^(k+1)-1)+2</em>(k-1)2^k+2= 2^k+(2k-2)2^k+1=(k)*2^(k+1)+1</p>

:ET