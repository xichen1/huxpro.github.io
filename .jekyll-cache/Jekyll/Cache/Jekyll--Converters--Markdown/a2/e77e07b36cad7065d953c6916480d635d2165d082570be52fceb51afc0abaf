I"D<h3 id="basic-terminology">Basic terminology</h3>

<p><strong><em>V Nodes/ Vertices:</em></strong> A set of n elements with unique identifiers (1, 2, 3, … , n).</p>

<p><strong><em>E Edges:</em></strong></p>

<p>For undirected graph: each edge is a set of exactly two nodes, e.g. e = {u, v}. u and v are nodes and we say e connects u and v. We also say u and v are adjacent or neighbors.</p>

<p>For directed graph: each edge is an ordered pair, e.g. e = &lt;u, v&gt;. We say u and v are adjacent. U is an in-neighbor of v and v is an out-neighbor of u. (u –&gt; v).</p>

<p><strong><em>Adjacent</em></strong> can be the property between vertex and vertex or between edge and edge. e.g., 1 and 3 are adjacent. (1,2) and (2,5) are adjacent.</p>

<p>Incident can be the property between vertex and edge. e.g., 1 and (1,3) are incident.</p>

<p><strong><em>Loop/ self-loop:</em></strong> the edge is the form e = uu, which means the edge connect one node and the node itself.</p>

<p><strong><em>Degree of vertex:</em></strong>  The number of edges that touch v. It is also known as the number neighbors of v.</p>

<p><strong><em>Path:</em></strong> A sequence of nodes v_0, v_1, …, v_k such there exists k edges e_1, e_2, …, e_k where e_i connect v_i-1 to v_i.</p>

<p><strong><em>Simple path:</em></strong> A path where all nodes are unique. Then since there are k edges, k is the length of the path.</p>

<p><strong><em>Cycle:</em></strong> A path where the start and the end vertex are the same, v_0 = v_k.</p>

<p><strong><em>A simple cycle:</em></strong> A cycle where all vertex except v_0 and v_k are unique. k is the length of the cycle.</p>

<p><strong><em>Size of the graph:</em></strong> |G| = number of vertex |V| = n</p>

<p><strong><em>Sub-graph:</em></strong> G’ = (V’, E’) is a sub-graph of G = (V, E) if <script type="math/tex">V' \subset V and E' \subset E</script>. Removing an edge from G results in the subgraph (V, E \ {e})</p>

<p><strong><em>Induced subgraph:</em></strong> Let G = (V, E). And let <script type="math/tex">S \subset V</script> be any subset of vertices of G. Then the induced subgraph G[S] is the graph whose vertices set is S and the edge set contains all edges which connect nodes in S in G. Removing a node from G results in induced graph.</p>

<p><strong><em>Connectivity in an undirected graph:</em></strong> u is connected to v (u ~ v) if there exists a path from u to v. Note: otherwise, we can only say edge e connects the nodes u and v.</p>

<p>G is a connected graph if for every <script type="math/tex">u,v \in V, u~v</script>.</p>

<h5 id="to-be-finished">To be finished:</h5>

<p>Connected component, Forests and trees.</p>

<h3 id="basic-properties">Basic properties</h3>

<p>A graph with n nodes and m edges. <strong><em>The range of m:</em></strong></p>

<p>For directed graph: The max number of edges is (n)<em>(n-1). The max situation is when every node connects to all the other nodes. There are n such situations so the total number is n</em>(n-1).</p>

<p>For undirected graph, e = (u,v) and x = (v,u) are the same edge and be counted as one edge. So the total number is n*(n-1)/2.</p>

<p><strong><em>The number of degree:</em></strong></p>

<p>For an undirected graph: <script type="math/tex">\sum_{v\in V} deg(v) = 2m</script>. It means that in an undirected graph, there are 2m degrees for all vertices. Because for each edge, it connects two vertices so it provides 2 degrees in total.</p>

<p>For an directed graph: <script type="math/tex">\sum_{v\in V} in_deg(v) = m =  \sum_{v\in V} out_deg(v)</script>.</p>

<h3 id="representation-of-graph">Representation of Graph</h3>

<p>Two ways: Adjacency matrix and Adjacent list.</p>

<p>Adjacency matrix is an n*n matrix where i, j entry contains 1 if edge connects i and j or 0 if no edge.</p>

<p>Adjacency list: It lists all nodes in one column and following the nodes which are their neighbors.</p>

<p>The complexity of two ways:</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>Adjacency List</th>
      <th>Adjacency Matrix</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Space</td>
      <td>O(m) Depend on the edge</td>
      <td>O(n^2)</td>
    </tr>
    <tr>
      <td>Accessing a node v/ Traversing all node</td>
      <td>O(1) / O(n)</td>
      <td>O(1) / O(n)</td>
    </tr>
    <tr>
      <td>Accessing a edge e = (u,v)</td>
      <td>O(|\Gamma|)</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

:ET